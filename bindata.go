// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl (9kB)
// templates/main.tmpl (264B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCommandsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x73\xdb\xb8\x11\x7f\x26\xff\x0a\x1c\x27\xb9\x21\x13\x99\xca\x5d\x6f\xfa\xa0\x9e\x3a\x93\x38\x9f\x33\xf9\xaa\xe5\xdc\x3d\xb8\x9e\x06\x26\x57\x12\xc6\x20\x40\x83\x90\x63\x57\xe1\xff\xde\x59\x00\x24\x41\x91\x92\xed\xb4\x2f\x7d\xb1\x69\x2c\x80\xfd\xfe\xed\x2e\x3c\x9d\x92\x63\x99\x03\x59\x81\x00\x45\x35\xe4\xe4\xe2\x96\xc8\x12\x04\x2d\xd9\x51\xc6\xd9\x91\x23\x48\x95\x92\x97\x9f\xc8\xc7\x4f\xa7\xe4\xd5\xcb\x77\xa7\x69\x38\x9d\x92\x05\x00\x59\x6b\x5d\x56\xb3\xe9\x74\xc5\xf4\x7a\x73\x91\x66\xb2\x98\xe6\x54\x30\xe0\x2b\x4d\x6f\xb9\x54\xd3\xd1\xbb\xc2\xb0\xa4\xd9\x25\x5d\x01\x29\x28\x13\x61\xc8\x8a\x52\x2a\x4d\xe2\x30\xd8\x6e\x09\x5b\x92\xf4\x9d\x59\xa8\xd2\xd7\x85\x26\x75\x1d\x2d\x0b\x1d\x6d\xb7\x04\x44\x4e\xea\x7a\xb0\x69\xa1\x15\x13\xab\x0a\x37\x56\xf6\xf3\xc0\xe6\x53\x56\x00\xee\xd4\xac\x00\x6f\x5b\x18\x44\x0f\x53\x61\x9a\x71\x16\xf5\x4f\x95\x97\xab\x29\x28\x25\x55\xb5\x43\x50\xd5\xf4\xdf\xa0\x24\x97\xab\x29\x97\xab\x1d\x62\x55\x2e\x7f\xf9\xcb\x34\x93\x17\x8a\x8e\x52\xae\x59\x09\xca\x50\x64\x79\xb9\x4a\x99\x98\xae\x7f\x15\x52\x4c\x57\x20\x34\x87\x82\x8a\xf4\xfa\xd7\x28\x4c\xc2\x70\xbb\x25\x39\x2c\x99\x00\x12\x95\x54\xd1\xa2\x8a\x9c\xfe\x47\x44\x51\xb1\x02\x92\x7e\x2a\x35\x93\x82\xf2\xcf\x86\x6c\xa8\x86\xcc\x96\x04\xae\x48\x7a\x7a\x5b\x02\x89\x2e\xa4\xe4\x40\x85\x3d\x1c\x04\x59\x91\xa7\xaf\x39\x5d\x55\x71\x92\xbe\x90\x92\xc7\x68\xb4\xf4\xf8\xfd\xbb\x8f\xd4\x1a\x72\x42\x96\x94\x57\x30\x21\x86\xf0\x12\xaa\x4c\x31\xc3\x07\x89\x89\xe3\x00\xbc\x82\x3e\x1b\x26\xf4\x5f\x7f\x1b\x63\xf2\x0e\x09\x23\x5c\x9e\x3d\x94\xc3\x92\x4b\xba\x87\xc7\x6b\x4b\x1a\xe3\x92\xde\x87\xcf\xf0\x46\x1b\x83\x23\x17\x46\xd1\x1d\xf7\xb5\x61\x7a\xd4\xc5\xa2\xe7\xb3\x3f\x29\xd3\xa0\x9c\xb3\x86\xce\xf8\x46\x99\x3e\xc2\xeb\xed\xbe\xfd\x8e\x71\xf4\xc5\x1a\x13\xcd\xf2\xef\xb1\xcc\x38\x4b\x17\xa0\x8f\x37\x95\x96\x85\xe5\x91\x15\x79\x12\x86\x01\x5b\x12\x9f\xef\x5b\x5a\xb9\x4f\xb2\x0d\x83\xc0\x86\x5a\xfa\x82\x89\xfc\x73\x7b\xac\xd9\x9c\x84\x41\x1d\x7a\x49\xb6\xdd\x92\x47\x02\xc5\x9b\xcd\x49\xea\xe4\x34\x8b\xb4\x64\x66\xed\x8d\xdc\x59\xfd\xbc\xb9\xe0\x2c\x33\x34\xfb\xd9\xed\x08\xaf\xa9\x22\xcd\xe1\xba\x5e\x6c\x2e\x32\x59\x14\x54\xe4\x04\x43\x38\x0c\x97\x1b\x91\xf9\x74\x50\xd7\xa0\x50\xec\xb3\xf3\x82\x96\x67\x16\x2a\xce\xed\x2f\x54\x45\x81\xde\x28\x31\x46\xdd\x1a\x5f\x39\x8f\x3c\xaa\xcc\x45\x46\x24\x77\xa7\x8b\x87\xd1\x73\x41\x10\xe5\x9d\xe7\xa3\x99\xf1\x86\xbb\x63\x37\x26\x26\x76\xff\x46\xf1\x9d\x7d\x5f\x4e\xde\xb7\xf4\x7a\x62\xa5\x69\x02\xa7\x0e\xad\x61\x9d\x74\xb2\x44\x7c\xc2\x0b\x51\xc0\x4f\xcd\x5f\x56\xc6\xe9\x94\xf4\xed\x5a\xd7\x18\x1b\xad\x4d\x91\xea\x42\xe4\x3b\xa9\x98\x58\x71\x78\x8f\x80\x82\x67\x7d\x73\x8e\x9f\x8e\x5b\x29\xd2\x13\xb8\xda\x30\x05\x79\x8b\x34\x7d\x36\xd6\x3c\x13\xd2\xaa\x61\xa3\x88\x3c\x31\x60\x97\xfe\x81\x3f\x1d\x6e\x1f\x53\xf1\x96\x5e\xc3\x0b\x99\xdf\x92\xba\x9e\x90\x0b\xfc\x70\xe6\x6d\x4e\x27\x24\x7e\xd2\xc1\xe1\x09\x54\xa5\x14\x18\xf8\xc8\xf4\xc4\x78\xd5\x20\x02\x1e\x37\xf8\x6c\x23\x77\x4d\x45\xce\x41\x7d\xa6\x7a\x8d\xb6\x32\x59\xf2\xd6\xae\x35\x29\x14\x06\x18\xfd\xa3\x31\x66\x7c\xeb\x5f\x61\x6f\xb0\xe1\x5d\xd7\x24\x22\x4f\x89\x47\x0e\x83\x00\xb3\x2c\xe8\x82\xc7\xaa\xfa\x06\x74\x03\x1d\x96\x64\x80\x81\x2d\x89\xdb\x38\x9f\x93\x28\xb2\xcc\x9a\x95\xb1\x98\x3e\x6b\x6f\x7b\x27\x74\x73\xd5\x11\x13\x39\xdc\x44\xc9\xf9\x99\x09\xa9\xf3\x46\x86\x8d\xe2\x28\x80\xdd\xf4\xd4\xe8\x6d\x34\x40\x85\x1d\x2a\xb9\x60\x62\x13\xf2\xc8\xb8\xc6\x04\xd3\xc0\xa9\x28\x55\x57\x3f\xec\xce\xf4\x9d\xc0\xfa\xa3\xd7\x0d\xee\x1a\x76\x73\xe7\xb2\x2a\x3d\x81\x92\xd3\x0c\xe2\x8d\xe2\x06\x99\xbe\x6e\xbf\x9a\xe8\x70\xa7\x9d\xe5\xb7\xdb\xaf\xf5\x57\x83\x61\x1d\xa9\x0d\x9f\x09\xf9\x25\x69\x58\x37\x59\xd0\x07\xb3\x40\xc1\x15\x8a\x8c\xa0\x76\xcc\x19\x08\x9d\xa2\x96\x1f\x40\xaf\x25\x6e\x89\x13\x4c\x29\x94\x21\x09\x7b\xb9\x7d\x2f\x85\x87\xfa\x5e\x6d\x40\xdd\xb6\x0a\x23\xf3\x39\x51\x70\x95\x3e\xcf\xf3\x7f\x20\xc9\xd6\x85\x0e\x98\x47\x94\x72\x1a\xf9\x75\xcc\x63\xb0\x06\x9a\x83\x1a\xe7\xf0\xd6\xd0\x1e\xc2\xa2\xb3\x99\x67\xb2\x3b\xfa\x84\xa0\x9f\xc1\xb3\x39\x71\xc8\xff\x06\x34\x92\x4c\x86\x7d\x27\x9a\x69\x6e\xb0\x60\xb7\x12\x1a\xe6\x36\x99\xbc\x6b\x7e\x32\xd1\x6c\x0e\x7f\x64\xdc\x20\x90\x51\xd0\xeb\x4a\x86\xf6\xbd\x87\x81\x97\x85\x4e\x17\xa5\x62\x42\x2f\xe3\xe8\xf1\xb5\xb5\x87\x67\x89\xa4\xe5\xe2\xf7\x0d\x23\x96\xbe\x8f\xa9\x1f\xc0\xac\xb1\x7c\x30\x0c\xd9\x51\xbc\x73\x46\x33\xa0\xf7\x53\x07\x05\xe3\x52\x1d\x4b\xa1\x41\xe8\x23\xb4\x66\xd3\x75\x7c\x80\x9c\x51\x87\x7e\x11\x36\x0d\xf9\xad\xc3\x1b\xbc\x33\xe9\x44\xf1\x24\xc1\xac\xb1\x40\xf8\x02\x96\x52\x41\xec\xe1\xd8\xc4\xb9\x7d\x82\xcc\x13\x9b\x6a\x55\x69\x70\x15\x63\x02\x25\x7a\x29\x63\x87\x61\xb8\xf8\xd3\x9c\x08\xc6\xad\xd8\xae\xc2\x0a\xc6\x27\xf6\x87\xed\x96\xd3\x3f\x15\x2d\x63\x50\x6a\x42\x22\x4c\x39\xa8\x34\x59\x52\xc6\x21\x37\x51\x63\x64\xc2\x5a\x9f\x43\x26\x73\xc8\x87\xb0\x1e\x5a\x76\x28\x49\xba\xd0\x54\x6f\x2a\x33\xd3\xfc\x4e\x7e\x7b\xf6\xcc\x72\x76\xc2\x38\x48\xf8\x22\x0a\xaa\xaa\x35\xe5\x4d\xa9\x88\xad\x12\x3f\x3b\x0e\xc9\xdf\x06\xa2\xdf\x47\xf6\xf6\x5a\x8e\x1d\x85\x72\x77\xfb\xaa\x18\x5b\xd7\x36\xe6\x0e\x5a\xe4\x15\xfe\x5a\xc6\xd1\xdb\xd3\xd3\xcf\xe4\x71\x3e\x23\x8f\xab\x68\xb2\xab\x60\xbb\x60\xfc\x99\xb4\xb6\xa2\x4b\x0d\xad\xae\xd6\x91\xcf\x71\x69\x9f\x1f\x51\xf5\x46\x73\x6b\x49\x7b\x83\xaf\x7f\x63\xfb\xb9\xa5\xd9\x60\x15\xd0\x73\x04\xf6\xf4\xa0\x96\x34\x83\x6d\x8d\x09\x94\xc6\x03\x4f\x25\x3e\xfc\x38\xa4\x36\x16\xe8\x49\x61\x6c\x31\x6c\x1d\x1d\x46\x7f\x33\x9d\xac\x01\x68\xbf\x39\x7e\x50\x7f\xd2\xf6\x45\xff\x8b\x4e\x25\xb1\x5e\x33\x86\xa2\x5a\x43\x51\x6a\x94\xee\x59\x18\x04\x4b\xa9\x48\xb3\xf4\xbb\x91\xce\x4a\x9f\x3e\xb7\x8b\x55\x0b\x79\x6e\xd7\xd3\xa7\xa1\x8d\x8b\x9e\x39\x5c\xec\x8e\x69\xd7\x69\xf2\xdf\xe8\x39\x50\x30\xf1\xb2\x66\x2c\x0f\x86\xd1\x7f\x2c\x37\x3c\x27\x42\x6a\x92\x51\xce\x89\xf3\x52\xdb\x8e\x36\xf1\x8f\x3f\x31\x99\x69\xa6\x37\x94\x13\x2f\x64\x1a\x4a\x41\x75\xb6\xb6\x3d\x7c\xe0\xd7\x66\xb3\xee\x1c\xff\xc1\x7e\x37\xb5\x29\xb0\xb7\x59\x43\xd9\xb8\x7f\x03\xda\x6c\xfa\x83\xf2\x8d\xcd\xef\xd4\xe0\xe3\x8d\x76\xc8\xb8\x00\x0e\x99\xb6\x08\xee\x4a\xd9\x73\xce\x17\xa0\x35\xf6\x29\x71\xd2\xcb\x89\x71\x5b\xdc\xc7\x18\x2b\xd0\xa4\x91\xfc\x1a\x65\xb1\x86\x70\x96\x08\x0c\xc9\x97\xdb\x08\x6d\x2b\xcc\x29\x02\xa1\x91\xef\xec\xfc\xe2\x56\x83\x49\xa7\x57\x37\x25\x64\x1a\x72\xf2\x9d\xd8\x92\x43\xa2\xc7\x57\x98\x6d\xc9\xc4\xd9\xf4\x47\xe4\xfd\xd3\x49\x68\x6d\x8f\x88\xb5\x51\xad\xa4\x6d\x8d\xb4\x54\x77\x57\xdb\x07\x19\x44\xc2\x79\xdb\x9d\x6a\x4b\xe7\x0e\xbb\x06\xd3\x6c\xd2\x92\x8c\x0a\xb4\x8f\x02\x9a\xad\x49\x0e\x15\x06\x27\xa9\xcc\x55\x17\x90\xd1\x4d\x05\xe4\x71\x45\x58\x65\xa1\x6f\xe0\xb2\xc3\xb6\x68\x45\xf4\xc6\xf5\x20\x08\x2e\x14\xd0\xcb\x8e\xd6\x56\xe3\xa0\xee\xb7\x46\xf8\x97\x66\x05\xa4\x0b\x0e\x50\xc6\x76\x7c\xe7\x14\x2b\xf2\x13\xbb\x0e\x99\x14\x79\x8b\xb8\x08\x99\x2e\xcb\xff\x3e\x3f\x98\xe6\x7d\x93\x7c\x84\x6f\x71\xf4\x81\xde\xb0\x62\x53\x34\x37\x54\x04\x6e\x32\x80\xdc\xaf\x7e\x5d\x99\xd8\x41\xc5\x9d\x19\xf7\x04\x56\xac\x42\xa4\xaf\xfa\xc3\xb0\x19\x78\x94\x94\xba\xa9\x0a\x27\x52\x6a\x3b\xda\x57\xfd\x91\xc6\x6c\x9a\x93\x9f\xcd\x7b\x54\x7a\x6c\x29\x46\xf2\x2f\x15\xcc\x7a\x23\x8e\x1d\x47\xcd\xb4\x68\x09\xe9\xa9\x6b\xfe\x2c\xe5\xbd\x14\xab\x99\x8b\x69\x75\x99\xcb\x6f\x22\x1e\x7d\x08\x99\x84\x6d\x0f\x32\x1c\xb3\xe6\x44\xab\x0d\x84\x7e\xd1\x6c\xe4\x77\x83\xea\x7c\x87\xb7\xbf\x03\x45\x68\xf3\xea\x90\x0c\x61\x60\x9f\x5d\x4c\x0b\xd6\x7b\x72\x41\x47\xa2\xd5\xf6\x5a\x04\x37\xf4\x4d\x81\xe7\x89\x41\x7e\x92\x81\xd2\x94\x09\x02\xd7\x20\x34\x91\xaa\x0d\x70\xec\xab\x88\x75\x2b\x13\x2b\xdf\x60\xd1\x0b\x2e\xb3\x4b\x8c\x02\xc8\x36\x46\x40\xb4\xc3\xa6\x82\x8a\x94\xd2\xb6\x16\x5a\x92\x12\x14\x93\x39\x43\xa8\xbd\x25\xd9\x1a\xb2\xcb\x1f\xe0\x58\x3b\x87\x63\x13\xe9\x14\x8b\x51\x9d\x9d\xa1\x68\x4f\xc1\x0d\x6c\xc9\x75\xef\x40\xcd\x4b\x50\x37\xda\x62\x70\xdb\x44\xcc\x8a\x7c\x8f\x09\xbd\xb0\x4a\xbf\x54\x5d\xec\xb4\x13\x40\xfa\x9c\x33\x8a\xba\xb7\x39\xec\x16\x66\xe4\xac\xf7\xca\x12\xf4\x26\x98\xc1\xa9\x20\x30\x3c\x3c\x06\xbb\x1d\x79\xf3\xb4\x32\x42\xf0\x63\xbc\x79\x1d\x81\x2a\xa3\x25\x2c\xb4\xf2\xae\xdc\x17\xf1\x26\x0c\x9b\x50\x47\x15\xd4\xaa\x9a\x11\x6b\x8d\x0f\x4c\x60\xf6\x7f\xc4\x35\x04\x1a\x0e\xe2\x60\xd9\x6e\xee\x38\xd9\x88\x19\x41\x07\xc4\x68\xdd\x27\x3d\xd3\x4e\x08\x55\xab\xaa\x35\x50\xe3\x20\xbf\x0d\xbe\x67\xa3\xf4\xe8\xa6\x37\x10\x1f\x90\x0b\x39\x9e\xe1\xad\x37\xa4\xae\xcf\x87\xfd\xc4\x48\x4b\x1d\x04\x01\x97\xab\xf4\x35\xd5\x94\xc7\x09\xd6\x07\xac\x46\x49\xfa\xa1\x5a\xc5\x91\xa9\x16\xa6\x8b\xc0\x68\x4d\x1a\x0f\x85\xbe\xa3\xec\x5f\xb8\xc7\x8f\x60\xf7\x6c\x69\x01\x1d\x21\x95\x9b\xf2\xd4\xbc\x89\x77\x4a\x34\xa3\x58\x9c\xf4\x5f\xd4\xfc\x3a\x70\xcf\x87\xb5\x7e\x2a\x8c\x67\x42\xd3\xdf\xc0\x0d\x2d\x4a\x0e\x95\xeb\x2d\xc3\x7e\x97\x03\x37\xe6\xfe\x57\xcd\x26\x17\x83\xed\xa1\xa7\x73\x12\x11\xf3\xba\xd4\xa2\x9c\x53\x1c\xdb\xfa\x38\x21\x4f\x49\x64\xbc\xdb\xca\xeb\x12\xcb\x2c\x02\x7a\xe7\x9f\x22\x1a\x96\xbb\x03\x39\xba\x27\x45\xf7\x65\xe8\xde\x04\x3d\x98\x9f\x83\xf4\xdc\x4d\xc2\x7a\x32\x32\x46\xdf\x37\x35\xef\x99\x99\x8d\x4a\x6f\x59\x9e\x83\x68\x59\xdb\x3f\x67\xa6\xe7\x68\x49\xa3\xe2\x38\xb7\xcd\x5a\x27\xdb\x5d\x77\x26\xfc\xbe\x34\xff\x91\x2c\x6f\x94\x18\xbe\x24\x04\x01\x0e\xfd\x13\x7f\x14\x7e\x03\x1a\x37\xc4\xc3\xc7\x02\x7b\xfd\xd9\xb8\x84\x75\x3d\x3b\x77\x39\x39\xda\x68\x1e\x48\xec\x2f\x82\x5e\x70\xc0\x1a\x86\xad\x31\x0a\xd4\x64\x77\x3d\x40\x5f\xbf\xd3\x4c\x3f\x02\xe4\x55\x33\xb1\x93\xba\xc6\x9e\xbe\xeb\xf0\xfe\xd5\x86\xf3\xfd\xe6\xa6\xbb\xc1\xee\xa1\x10\x77\xe0\xc1\xba\x7b\xa9\xfe\x31\x9b\x59\x30\xcc\xdc\xcb\xc2\xce\x4c\xd5\xce\x12\x3b\xaf\x1c\xaf\xa5\x2a\xb0\xa7\x54\xee\x2b\x3e\xf0\xba\x71\x88\xb9\xbb\x07\x39\xfb\x4f\x19\x1d\xdb\xb1\xb6\xc9\xb6\xff\x57\x9f\x5b\x24\x1c\x1b\xb1\xc2\x36\xd5\x47\xdf\x5f\x3d\x08\x1b\x7d\x89\xed\xf1\x38\x8b\x06\x8f\xc8\xd1\x39\x99\xb7\x41\xfc\x08\x1b\xcb\xf3\x8e\x61\x2f\xc2\x0e\x4c\xa4\xa3\xf1\x38\xfe\xdf\x39\xe7\x82\xee\x5d\xf4\xce\x7f\xd1\x75\x95\x39\xf8\xb6\xbf\x68\xf4\x79\x9a\x28\xad\xcc\x24\x24\x6d\x53\x86\x48\xe2\x77\x3a\x0f\x1f\x86\xbb\xfb\x4c\xe2\xb7\x46\xdd\x99\x81\xf7\x87\xee\xc1\x00\xba\x7b\x18\xf6\xa3\x09\x15\x50\xab\x26\xcd\x50\xc1\xe1\xfb\xaa\x3f\xe8\x8e\x79\xa8\xff\x4f\x8c\x7c\xd7\x60\x83\x28\xfa\xff\x37\x99\x0b\x9f\x74\x01\xda\x60\xf9\x23\x96\x3b\x10\xbf\xd3\x54\x87\x9b\x42\x17\xb4\xfb\xe0\x72\x2c\x10\x3d\xf7\x79\x20\xf9\xed\x60\x23\x78\xc0\x16\xee\xbd\xc0\x8c\xcc\x9d\xf2\x75\xbf\x23\xdc\xa9\xc3\xb6\x3a\x9b\xef\xdd\x01\xa7\x6d\x0f\xc7\xbb\x43\xf7\x34\x19\x27\x7e\x1f\x58\x87\xff\x09\x00\x00\xff\xff\xa5\x1f\x84\x4d\x28\x23\x00\x00")

func templatesCommandsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCommandsTmpl,
		"templates/commands.tmpl",
	)
}

func templatesCommandsTmpl() (*asset, error) {
	bytes, err := templatesCommandsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/commands.tmpl", size: 9000, mode: os.FileMode(0644), modTime: time.Unix(1715600214, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0xf7, 0x61, 0x8, 0xa2, 0x91, 0x44, 0x53, 0x1f, 0x5f, 0x6c, 0xb8, 0x1b, 0xd5, 0x90, 0xf1, 0x21, 0xb7, 0xd7, 0x48, 0x60, 0x6e, 0xac, 0x90, 0x8, 0xe5, 0x6b, 0x9a, 0x82, 0x3b, 0x7c, 0xf}}
	return a, nil
}

var _templatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08\x01\x00\x00")

func templatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainTmpl,
		"templates/main.tmpl",
	)
}

func templatesMainTmpl() (*asset, error) {
	bytes, err := templatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.tmpl", size: 264, mode: os.FileMode(0644), modTime: time.Unix(1715595720, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x44, 0x1d, 0xd1, 0xf1, 0x2d, 0x88, 0x81, 0x79, 0xc, 0x9c, 0x7b, 0x51, 0x84, 0x23, 0x2e, 0xe6, 0xf6, 0x4d, 0x23, 0x83, 0xfe, 0xc9, 0x5e, 0x97, 0x7a, 0xec, 0xf3, 0x7e, 0x78, 0x88, 0x99}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": templatesCommandsTmpl,
	"templates/main.tmpl":     templatesMainTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"commands.tmpl": {templatesCommandsTmpl, map[string]*bintree{}},
		"main.tmpl":     {templatesMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
